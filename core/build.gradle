/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'mp' at '27/10/15 19:46' with Gradle 2.8
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.8/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

group = 'org.mp'
version = 0.1
jar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'
    	
    compile 'com.almende.eve:eve-bundle-full:3.1.1'
    compile 'com.almende.eve:eve-state-couch:3.1.1'
    compile 'de.grundid.opendatalab:geojson-jackson:1.0'
    compile 'com.thoughtworks.paranamer:paranamer:2.7'
    compile 'com.github.pengrad:java-telegram-bot-api:2.1.1'
    
    //compile 'org.mp:measurement-lib:1.0'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

install {
    repositories.mavenInstaller {
        pom.artifactId = 'em4so' 
        pom.packaging = 'jar'
        pom.version = '0.1'
    }
}

task fatJar(type: Jar) {
duplicatesStrategy = 'exclude'
  manifest {
    attributes 'Implementation-Title': 'Smart Object Manager', 'Implementation-Version': version
  }
    baseName = project.name + '-all'
    from {
    // Include all dependencies in the jar
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  	}
  	
    with jar
}
